#+title: Подсчет счастливых билетов на Python
#+date: <2023-10-20>
#+keywords: draft

Яндекс.Метрика показывает несколько визитов [[./lucky-tickets.org][предыдущего поста]] из по поисковым запросам "Счастливые билеты Python".

Погуглил - оказывается есть такая олимпиадная задача.

Ну чтож, я не то чтобы большой специалист по Python, но почему бы и не да? Задачка кажется интересной.

Сформулирую задачу: /Посчитать количество счастливых билетов в выборке 10^(2*n+1)-1 где n задается пользователем/.

Проще говоря - пользователь задает 3, значит берем бобину(хе) из 10^(2*3+1)-1=999999 билетов и находим сколько из них счастливых.
Напомню - счастливый билет это билет у которого сумма цифр в левой половине равна сумме цифр в правой половине.

Во-вторых: википедия говорит что для этой задачи есть формула, я сделаю вид что не знаю о её существовании, решать задачу
буду алгоритмически.

* Вариант 1. Примитивный
Самый простой алгоритм:

#+begin_src python
  import sys

  def countTickets(n):
      res = 0
      # В цикле перебираем все варианты в выборке
      for i in range(pow(10, 2 * n)):
	  # В каждой итерации цикла попробуем
	  # понять - является ли наш билетик счастливым или нет

	  # Преобразуем число в кортеж чисел
	  # для этого конвертируем число в строку с лидирующими
	  # нолями, а затем разложим строку на отдельные символы
	  # и конвертируем обратно
	  d = [int(q) for q in str(i).zfill(n*2)]

	  # при помощи срезов посчитаем суммы левой
	  # и правой половинок кортежа, и инкременритуем счетчик
	  # при совпадении
	  if sum(d[:n]) == sum(d[n:]):
	      res+=1

      return res

  if __name__ == "__main__":
      # Значение по-умолчанию
      n = 3
      # проверяем - если был передан параметр
      # командной строки - используем его
      if len(sys.argv) > 1:
	  n = int(sys.argv[1])

      res = countTickets(n)

      # Выведем результат. Используем f-string, они прикольные
      print(f'Найдено билетов: {res}')
#+end_src

В принципе в комментариях всё подробно расписано - из параметров командной строки передается параметр,
формируем цикл, преобразуем число в строку, разбиваем на символы, собираем обратно, считаем суммы левой и правой половин.

Сохраним файл под именем =v01.py= и запустим выполнение.

Выполним пару пробных запусков:
#+begin_src shell
  > python3 v01.py 1
  Найдено билетов: 10

  > python3 v01.py 2
  Найдено билетов: 670

  > python3 v01.py 3
  Найдено билетов: 55252

  > python3 v01.py
  Найдено билетов: 55252
#+end_src

Вроде похоже на правду.
Результаты последних двух одинаковы потому что 3 - значение по-умолчанию.

Параметры до трех отрабатывают почти мгновенно, четверка заставила ноут задуматься на три минуты,
пятерки я не дождался.

#+begin_src shell
  > time python3 v01.py 4
  Найдено билетов: 4816030

  real	3m31.292s
  user	3m31.229s
  sys	0m0.035s
#+end_src
Выполнение расчета при n=4 с замером времени выполнения

Здесь однозначно есть место для оптимизации алгоритма.

** Многопоточное выполнение
Очевидно что у нас есть некоторый набор расчетов, каждый из которых не зависит от расчетов других,
значит мы смело можем разбить наш список на несколько раздельных списков и вычислить в несколько
параллельных потоков. Т.е., например, мы хотим посчитать билеты от 0 до 99: разобъем все 100 билетов
на 4 пачки:
+ 00-24
+ 24-49
+ 50-74
+ 75-99
И запустим четые параллельных расчета, а в конце отсуммируем результаты.
Расчет должен будет выполниться в четыре раза быстрее.

Писать этот алгоритм мне стало лениво, да и он совершенно не решает проблему со сложностью
базового алгоритма - на n больше 4 расчет всё так же будет занимать продолжительное время,
пусть и поделенное на несколько потоков.

Короче история бесперспективная, забросать задачу железом (а это именно оно, т.к. речь идет о ядрах процессора)
здесь не получится.
* Вариант 2
Очевидно что предыдущий вариант не самый оптимальный.

Попробуем взглянуть на задачу под другим углом.

*Мысль 1*: количество сумм ограничено количеством разрядов: т.е. при n=3 самая маленькая сумма
будет 0 (для комбинации 000), а самая большая будет 27 (для комбинации 999), остальные суммы
будут находиться где-то между ними. Для каждой суммы будет определенное число комбинаций, из которых
её можно составить. Например сумма 3 может быть получена десятью комбинациями:
+ 003
+ 012
+ 021
+ 030
+ 102
+ 111
+ 120
+ 201
+ 210
+ 300

*Мысль 2*: Количество счастливых билетов по сумме 3 можно рассчитать как квадрат количества комбинаций,
т.к. каждой комбинации слева будет соответсвовать 10 комбинаций справа 10*10 = 100. Получается для того чтобы
посчитать количество всех счастливых билетов нужно посчитать количество комбинаций для каждой суммы, а затем
отсуммировать квадраты количеств - это и будет нужный нам результат.

*Мысль 3*: Посчитать количества комбинаций можно было бы итерационно, но в таком случае мы скатываемся
в первый примитивный вариант решения - получили бы огромное количество итераций и опять долгое выполнение
алгоритма.

Представим комбинации цифр в виде дерева:

[[file:../static/lucky-tickets-2/img1.png]]
На картинке представлено дерево для двухзначных комбинаций начинающихся с 0.

Теперь представим кусок дерева для трехзначного дерева:
[[file:../static/lucky-tickets-2/img2.png]]
Видно что паттерн повторяется: рисунок под четверкой полностью повторяет первую схему,
но суммы, на этот раз, все становятся увеличенными на корень дерева (четверку).

Этот принцип повторяется на протяжении всего дерева - каждый следующий уровень повторяет
значения предыдущего уровня со сдвигом на значение корня.

#+begin_src python
  import sys

  def countTickets(n):
      sumsPrev = [1]
      for i in range(n):
	  l = (i + 1) * 9 + 1
	  sumsCurr = [0] * l
	  for j in range(10):
	      for a, b in enumerate(sumsPrev):
		  sumsCurr[j + a] += b
	  sumsPrev = sumsCurr
      rs = 0
      for i in sumsPrev:
	  rs += i * i
      return rs
    
  if __name__ == "__main__":
      n = 3
      if len(sys.argv) > 1:
	  n = int(sys.argv[1])
      res = countTickets(n)
      print(f'Найдено билетов: {res}')

#+end_src

Код выполняет расчет используя этот принцип:
+ Во внешнем цикле (i) мы итерируемся по разрядам - сначала обсчитываем
  суммы для 1 разряда, затем для двух и т.д.
+ В массиве =sumsCurr= хранятся количества комбинаций в разрезе сумм. Индекс массива
  соответствует сумме, а значение - количеству комбинаций. Массив инициализируется
  нулями, количество элементов в массиве равно максимальной сумме для текущего разряда
+ В массиве =SumsPrev= хранятся результаты итерации по предыдущему разряду
+ В теле цикла массив =SumsCurr= десять раз заполняется =SumsPrev= со сдвигом и увеличением
  на текущее значение
+ В конце, все элементы результирующего массива возводятся в квадрат и суммируются

Сохраним файл под именем =v02.py= и запустим выполнение с замером времени.

#+begin_src shell
  > time python3 v02.py 4
  Найдено билетов: 4816030

  real	0m0.086s
  user	0m0.066s
  sys	0m0.019s
#+end_src
Расчет для четырех занял 86 миллисекунд

Попробуем получить результаты для больших значений
#+begin_src shell
  > time python3 v02.py 5
  Найдено билетов: 432457640

  real    0m0,026s
  user    0m0,023s
  sys     0m0,003s
  > time python3 v02.py 10
  Найдено билетов: 3081918923741896840

  real    0m0,029s
  user    0m0,025s
  sys     0m0,004s
  > time python3 v02.py 20
  Найдено билетов: 218768894829904122626725603838896148680

  real    0m0,028s
  user    0m0,025s
  sys     0m0,003s
#+end_src

Код выполняется значительно быстрее первого вариант, результаты похожи на правду.
